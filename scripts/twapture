#!/usr/bin/env python
# Description: flexibly capture twitter streams using python logging
# Author: Jeff Terstriep <jterstriep@gmail.com>
# Date: 11/19/2015
# License:
"""
Provides a flexible tool for capturing tweets from Twitter's streaming API.
The stream can be filtered based on topics (keywords and phrases) and/or
location (bounding box). If no filters are specified the entire public
data stream is sampled.

Twapture uses Python's logging tool to record incoming tweets. By default,
a WatchedFileHandler is used so that an external process can manage file
rotation, but a TimedRotatingFileHandling can be specified to allow
twapture to self-manage its record files.

Twapture can be used as a command line tool to explore the twitter stream,
but it is primarily designed to work in concert with supervisord to provide
a robust, continuously running capture service.
"""

from __future__ import absolute_import, print_function
import os
import sys
import argparse
import json
import yaml

import logging
import logging.handlers
logger = logging.getLogger('twapture')

from requests.packages import urllib3
urllib3.disable_warnings()

from tweepy import OAuthHandler
from tweepy import Stream

from twapture import SerializedListener, Recorder, Encoder, Statistics



def parse_locations(locations):
    return [float(x.strip('[()]')) for x in locations.split(',')]


def config_logger(logger, fname, level=logging.INFO):

    if fname == 'stderr':
        handler = logging.StreamHandler(sys.stderr)
    else:
        handler = logging.handlers.WatchedFileHandler(fname)

    handler.setLevel(level)
    formatter = logging.Formatter('%(asctime)-18s %(levelname)8s %(name)s '
                                  ': %(message)s')
    handler.setFormatter(formatter)
    logger.addHandler(handler)
    logger.setLevel(level)


def merge_args(config, args):
    """Override select configuration variables with command line args."""

    # override configuration with command line options
    if args.recorder_filename:
        config['recorder']['filename'] = args.recorder_filename
    if args.locations:
        config['twitter']['locations'] = args.locations
    if args.track:
        config['twitter']['track'] = args.track 
    if args.log_filename:
        config['logging']['filename'] = args.log_filename

    # security keys will come from environmental variables if available
    if 'TWITTER_CONSUMER_KEY' in os.environ:
        config['twitter']['consumer-key'] = \
                os.environ.get('TWITTER_CONSUMER_KEY')

    if 'TWITTER_CONSUMER_SECRET' in os.environ:
        config['twitter']['consumer-secret'] = \
                os.environ.get('TWITTER_CONSUMER_SECRET')

    if 'TWITTER_ACCESS_TOKEN' in os.environ:
        config['twitter']['access-token'] = \
                os.environ.get('TWITTER_ACCESS_TOKEN')

    if 'TWITTER_ACCESS_TOKEN_SECRET' in os.environ:
        config['twitter']['access-token-secret'] = \
                os.environ.get('TWITTER_ACCESS_TOKEN_SECRET')


def create_parser():

    parser = argparse.ArgumentParser(description=__doc__)

    parser.add_argument('config',
            help='YAML config file (required)')

    parser.add_argument('--recorder-filename', 
            help='filename where tweets will be written')

    parser.add_argument('--locations',
            help='bounding box (llx,lly,trx,try) to use as filter')

    parser.add_argument('--track',
            help='comma separated list of keywords to use as filter')

    parser.add_argument('--log-filename',
            help='location for log file (default=stderr)')

    parser.add_argument('-d', '--debug',
            default=logging.INFO, const=logging.DEBUG, action='store_const',
            help='set logging level to debug')

    return parser


def main():

    parser = create_parser()
    args = parser.parse_args()

    try:
        with open(args.config) as ymlfile:
            config = yaml.safe_load(ymlfile)
    except (OSError, IOError) as e:
        logging.error('could not process config file')
        parser.print_usage()
        sys.exit(1)
    else:
        merge_args(config, args)

    # setup the process logger
    config_logger(logger, config['logging']['filename'], level=args.debug)


    listener = SerializedListener()

    # setup the recorder and add it to the stream listener
    encoder = Encoder(**config['recorder'])
    recorder = Recorder(u'tweet_recorder', encoder=encoder.status_encoder,
            **config['recorder'])
    listener.append(recorder.status_handler)

    # configure statistic processing and add it to the steam listener
    if 'stats' in config:
        encoder = Statistics(**config['stats'])
        stats = Recorder(u'tweet_stats', encoder=encoder.status_encoder,
            **config['stats'])
        listener.append(stats.status_handler)

    # begin streaming
    auth = OAuthHandler(config['twitter']['consumer-key'],
            config['twitter']['consumer-secret'])
    auth.set_access_token(config['twitter']['access-token'],
            config['twitter']['access-token-secret'])
    stream = Stream(auth, listener)

    track = config['twitter'].get('track', '')
    locations = config['twitter'].get('locations', '')
    try:
        if track or locations:
            logger.info('starting stream filter: track=%s location=%s', 
                    str(track), str(locations))
            stream.filter(track=track, locations=locations)

        else: 
            logger.info('starting stream sample')
            stream.sample()

    except Exception as e:
        logger.error('unable to establish connection', exc_info=True)
        sys.exit(1)


if __name__ == '__main__':
    main()
