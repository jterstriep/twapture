#!/usr/bin/env python
# Description: flexibly capture twitter streams using python logging
# Author: Jeff Terstriep <jterstriep@gmail.com>
# Date: 11/19/2015
# License:
"""
Provides a flexible tool for capturing tweets from Twitter's streaming API.
The stream can be filtered based on topics (keywords and phrases) and/or
location (bounding box). If no filters are specified the entire public
data stream is sampled.

Twapture uses Python's logging tool to record incoming tweets. By default,
a WatchedFileHandler is used so that an external process can manage file
rotation, but a TimedRotatingFileHandling can be specified to allow
twapture to self-manage its record files.

Twapture can be used as a command line tool to explore the twitter stream,
but it is primarily designed to work in concert with supervisord to provide
a robust, continuously running capture service.
"""

from __future__ import absolute_import, print_function
import os
import sys
import argparse
import json
import yaml

import logging
import logging.handlers
logger = logging.getLogger('twapture')

from requests.packages import urllib3
urllib3.disable_warnings()

from tweepy import OAuthHandler
from tweepy import Stream

from twapture import MultiplexListener, StatusEncoder
from twapture.multiplex import pprint_tweets


def parse_interval(interval):
    "splits interval into numerical value and units"
    for i,c in enumerate(interval):
        if not c.isdigit():
            break;
    return (int(interval[:i]), interval[i:])


def parse_locations(locations):
    return [float(x.strip('[()]')) for x in locations.split(',')]


def config_watched_logger(logger, fname, level=logging.INFO):
    handler = logging.handlers.WatchedFileHandler(fname)
    handler.setLevel(level)
    formatter = logging.Formatter('%(asctime)-18s %(levelname)8s %(name)s '
                                  ': %(message)s')
    handler.setFormatter(formatter)
    logger.addHandler(handler)
    logger.setLevel(level)

def export_shell(args):
    """writes the security values in a format useful for sourcing from shell"""

    print("export TWITTER_CONSUMER_KEY=%s" % args.ck)
    print("export TWITTER_CONSUMER_SECRET=%s" % args.cs)
    print("export TWITTER_ACCESS_TOKEN=%s" % args.at)
    print("export TWITTER_ACCESS_TOKEN_SECRET=%s" % args.ats)
    sys.exit(0)

# TODO: write the entire config file
def export_supervisord(args):
    """writes the security values in a format useful for supervisord config"""

    print('environment=TWITTER_CONSUMER_KEY="%s"=TWITTER_CONSUMER_SECRET'
          '="%s"=TWITTER_ACCESS_TOKEN="%s"=TWITTER_ACCESS_TOKEN_SECRET="%s"' \
          % (args.ck, args.cs, args.at, args.ats))
    sys.exit(0)

def export_config(args):
    # get resource and write out


def merge_args(config, args):
    """Override select configuration variables with command line args."""

    if args.recorder_filename:
        config['recorder']['filename'] = args.recorder_filename
    if args.locations:
        config['twitter']['locations'] = args.locations
    if args.targets:
        config['twitter']['targets'] = args.targets 
    if args.log_filename:
        config['logging']['filename'] = args.log_filename
    if args.log_statistics > 0:
        config['logging']['statistics'] = args.log_statistics
    if args.targets:
        config['twitter']['targets'] = args.targets 
    if args.consumer_key:
        config['twitter']['consumer_key'] = args.consumer_key
    if args.consumer_secret:
        config['twitter']['consumer_secret'] = args.consumer_secret
    if args.access_token:
        config['twitter']['access_token'] = args.access_token
    if args.access_token_secret:
        config['twitter']['access_token_secret'] = args.access_token_secret


def create_parser():

    parser = argparse.ArgumentParser(description=__doc__)

    parser.add_argument('config',
            default = '',
            help='YAML config file (required)')

    parser.add_argument('--recorder-filename', 
            default='',
            help='filename where tweets will be written (default=stdout)')

    parser.add_argument('--locations',
            default='',
            help='bounding box (llx,lly,trx,try) to use as filter')

    parser.add_argument('--targets',
            default='',
            help='comma separated list of keywords to use as filter')

    parser.add_argument('--log-filename',
            default = 'stderr',
            help='location for log file')

    parser.add_argument('--log-statistics',
            type=int, metavar='MIN', default=0, 
            help='add collection statistics to log ever N minutes (default=0)')

    parser.add_argument('--consumer-key', '--ck',
            default=os.environ.get('TWITTER_CONSUMER_KEY', ''),
            help='Twitter consumer key (default=$TWITTER_CONSUMER_KEY)')

    parser.add_argument('--consumer-secret', '--cs',
            default=os.environ.get('TWITTER_CONSUMER_SECRET', ''),
            help='Twitter consumer key (default=$TWITTER_CONSUMER_SECRET)')

    parser.add_argument('--access-token', '--at',
            default=os.environ.get('TWITTER_ACCESS_TOKEN', ''),
            help='Twitter access token (default=$TWITTER_CONSUMER_KEY)')

    parser.add_argument('--access-token-secret', '--ats',
            default=os.environ.get('TWITTER_ACCESS_TOKEN_SECRET', ''),
            help='Twitter access token secret')

    parser.add_argument('--export-config', 
            default=False, action='store_true',
            help='export a sample config file and exit')

    parser.add_argument('--export-supervisord',
            default=False, action='store_true',
            help='export security values in supervisord.conf format and exit')

    parser.add_argument('--export-shell', 
            default=False, action='store_true',
            help='export security values in shell format and exit')

    return parser


def main():

    parser = create_parser()
    args = parser.parse_args()

    try:
        with open(args.config) as ymlfile:
            config = yaml.safe_load(ymlfile)
    except (OSError, IOError) as e:
        logging.error('could not process config file')
        parser.print_usage()
        sys.exit(1)

    # setup the process logger
    config_logger(logger, config['logging']['filename'])

    # dumps the security tokens in convenient formats
    if args.export_shell:
        export_shell(args)
    if args.export_supervisord:
        export_supervisord(args)

    # create the twitter stream listener 
    auth = OAuthHandler(args.ck, args.cs)
    auth.set_access_token(args.at, args.ats)

    # create the tweet recorder, set the handlers
    if args.recorder:
        recorder = logging.getLogger(u'tweet_recorder')
        if args.trf:
            config_timed_recorder(recorder, args.recorder, args.trf,
                    bufsize=args.bs)
        else:
            config_watched_recorder(recorder, args.recorder, 
                    bufsize=args.bs)

        # create the field encoder and writer
        csv_encoder = StatusEncoder(recorder.info, config.fields)
        listener = MultiplexListener(csv_encoder.encode)

    # if recorder file isn't specified, pretty print tweets to stdout
    else:
        listener = MultiplexListener(pprint_tweets)

    # capture tweets
    stream = Stream(auth, listener)
    try:
        if args.keywords and not args.locations:
            logger.info('starting stream filter track of %s', args.keywords)
            stream.filter(track=args.keywords.split(','))

        elif args.locations and not args.keywords:
            logger.info('starting stream filter location of %s', 
                        args.locations)
            stream.filter(locations=parse_locations(args.locations))

        elif args.keywords and args.locations:
            logger.info('starting stream filter track and location')
            stream.filter(target=args.keywords.split(','),
                          locations=parse_locations(args.locations))
        else:
            logger.info('starting stream sample')
            stream.sample()

    except Exception as e:
        logger.error('unable to establish connection', exc_info=True)
        sys.exit(1)


if __name__ == '__main__':
    main()
